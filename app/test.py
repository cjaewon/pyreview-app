from fastapi import FastAPI
from pydantic import BaseModel
import json  # json 모듈을 임포트합니다.

app = FastAPI()

from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

origins = [
    "*",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# 요청 본문 모델
class PyCodeReviewRequest(BaseModel):
    # 실제 요청에는 다른 필드가 올 수 있지만, 예시에서는 단순화합니다.
    # FastAPI가 유효한 POST 요청을 받기 위해 최소한의 모델을 정의합니다.
    # 실제 사용 시에는 제공해주신 JSON의 구조에 맞춰 모델을 상세하게 정의해야 합니다.
    pass

# 응답으로 반환할 JSON 데이터
# 제공해주신 JSON을 문자열 형태로 저장합니다.
RESPONSE_JSON_DATA = {
  "formatter_result": [
    "from fastapi import FastAPI\nfrom pydantic import BaseModel\nimport tools\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef root():\n    return \"Hello, World!\"\n\n\nclass CodeReviewReq(BaseModel):\n    problem_text: str | None\n    code: str\n\n\nclass CodeReviewResp(BaseModel):\n    formatter_result: tuple[bytes, bytes, int | None]\n    linter_result: tuple[bytes, bytes, int | None]\n    review_ai_result: str | None\n\n\n@app.post(\"/api/pycode-review\")\nasync def pycode_review_api(body: CodeReviewReq) -> CodeReviewResp:\n    return CodeReviewResp(\n        formatter_result=await tools.ruff_format(body.code),\n        linter_result=await tools.ruff_lint(body.code),\n        review_ai_result=await tools.review_ai.review_chat_completions_api(\n            body.problem_text, body.code\n        ),\n    )\n",
    "",
    0
  ],
  "linter_result": [
    "[\n  {\n    \"cell\": null,\n    \"code\": \"D100\",\n    \"end_location\": {\n      \"column\": 1,\n      \"row\": 1\n    },\n    \"filename\": \"-\",\n    \"fix\": null,\n    \"location\": {\n      \"column\": 1,\n      \"row\": 1\n    },\n    \"message\": \"Missing docstring in public module\",\n    \"noqa_row\": 1,\n    \"url\": \"https://docs.astral.sh/ruff/rules/undocumented-public-module\"\n  },\n  {\n    \"cell\": null,\n    \"code\": \"I001\",\n    \"end_location\": {\n      \"column\": 13,\n      \"row\": 3\n    },\n    \"filename\": \"-\",\n    \"fix\": {\n      \"applicability\": \"safe\",\n      \"edits\": [\n        {\n          \"content\": \"import tools\\nfrom fastapi import FastAPI\\nfrom pydantic import BaseModel\\n\\n\",\n          \"end_location\": {\n            \"column\": 1,\n            \"row\": 5\n          },\n          \"location\": {\n            \"column\": 1,\n            \"row\": 1\n          }\n        }\n      ],\n      \"message\": \"Organize imports\"\n    },\n    \"location\": {\n      \"column\": 1,\n      \"row\": 1\n    },\n    \"message\": \"Import block is un-sorted or un-formatted\",\n    \"noqa_row\": 1,\n    \"url\": \"https://docs.astral.sh/ruff/rules/unsorted-imports\"\n  },\n  {\n    \"cell\": null,\n    \"code\": \"Q000\",\n    \"end_location\": {\n      \"column\": 13,\n      \"row\": 7\n    },\n    \"filename\": \"-\",\n    \"fix\": {\n      \"applicability\": \"safe\",\n      \"edits\": [\n        {\n          \"content\": \"\\\"/\\\"\",\n          \"end_location\": {\n            \"column\": 13,\n            \"row\": 7\n          },\n          \"location\": {\n            \"column\": 10,\n            \"row\": 7\n          }\n        }\n      ],\n      \"message\": \"Replace single quotes with double quotes\"\n    },\n    \"location\": {\n      \"column\": 10,\n      \"row\": 7\n    },\n    \"message\": \"Single quotes found but double quotes preferred\",\n    \"noqa_row\": 7,\n    \"url\": \"https://docs.astral.sh/ruff/rules/bad-quotes-inline-string\"\n  },\n  {\n    \"cell\": null,\n    \"code\": \"ANN201\",\n    \"end_location\": {\n      \"column\": 9,\n      \"row\": 8\n    },\n    \"filename\": \"-\",\n    \"fix\": {\n      \"applicability\": \"unsafe\",\n      \"edits\": [\n        {\n          \"content\": \" -> str\",\n          \"end_location\": {\n            \"column\": 11,\n            \"row\": 8\n          },\n          \"location\": {\n            \"column\": 11,\n            \"row\": 8\n          }\n        }\n      ],\n      \"message\": \"Add return type annotation: `str`\"\n    },\n    \"location\": {\n      \"column\": 5,\n      \"row\": 8\n    },\n    \"message\": \"Missing return type annotation for public function `root`\",\n    \"noqa_row\": 8,\n    \"url\": \"https://docs.astral.sh/ruff/rules/missing-return-type-undocumented-public-function\"\n  },\n  {\n    \"cell\": null,\n    \"code\": \"D103\",\n    \"end_location\": {\n      \"column\": 9,\n      \"row\": 8\n    },\n    \"filename\": \"-\",\n    \"fix\": null,\n    \"location\": {\n      \"column\": 5,\n      \"row\": 8\n    },\n    \"message\": \"Missing docstring in public function\",\n    \"noqa_row\": 8,\n    \"url\": \"https://docs.astral.sh/ruff/rules/undocumented-public-function\"\n  },\n  {\n    \"cell\": null,\n    \"code\": \"Q000\",\n    \"end_location\": {\n      \"column\": 25,\n      \"row\": 9\n    },\n    \"filename\": \"-\",\n    \"fix\": {\n      \"applicability\": \"safe\",\n      \"edits\": [\n        {\n          \"content\": \"\\\"Hello, World!\\\"\",\n          \"end_location\": {\n            \"column\": 25,\n            \"row\": 9\n          },\n          \"location\": {\n            \"column\": 10,\n            \"row\": 9\n          }\n        }\n      ],\n      \"message\": \"Replace single quotes with double quotes\"\n    },\n    \"location\": {\n      \"column\": 10,\n      \"row\": 9\n    },\n    \"message\": \"Single quotes found but double quotes preferred\",\n    \"noqa_row\": 9,\n    \"url\": \"https://docs.astral.sh/ruff/rules/bad-quotes-inline-string\"\n  },\n  {\n    \"cell\": null,\n    \"code\": \"D101\",\n    \"end_location\": {\n      \"column\": 20,\n      \"row\": 11\n    },\n    \"filename\": \"-\",\n    \"fix\": null,\n    \"location\": {\n      \"column\": 7,\n      \"row\": 11\n    },\n    \"message\": \"Missing docstring in public class\",\n    \"noqa_row\": 11,\n    \"url\": \"https://docs.astral.sh/ruff/rules/undocumented-public-class\"\n  },\n  {\n    \"cell\": null,\n    \"code\": \"D101\",\n    \"end_location\": {\n      \"column\": 21,\n      \"row\": 15\n    },\n    \"filename\": \"-\",\n    \"fix\": null,\n    \"location\": {\n      \"column\": 7,\n      \"row\": 15\n    },\n    \"message\": \"Missing docstring in public class\",\n    \"noqa_row\": 15,\n    \"url\": \"https://docs.astral.sh/ruff/rules/undocumented-public-class\"\n  },\n  {\n    \"cell\": null,\n    \"code\": \"Q000\",\n    \"end_location\": {\n      \"column\": 31,\n      \"row\": 20\n    },\n    \"filename\": \"-\",\n    \"fix\": {\n      \"applicability\": \"safe\",\n      \"edits\": [\n        {\n          \"content\": \"\\\"/api/pycode-review\\\"\",\n          \"end_location\": {\n            \"column\": 31,\n            \"row\": 20\n          },\n          \"location\": {\n            \"column\": 11,\n            \"row\": 20\n          }\n        }\n      ],\n      \"message\": \"Replace single quotes with double quotes\"\n    },\n    \"location\": {\n      \"column\": 11,\n      \"row\": 20\n    },\n    \"message\": \"Single quotes found but double quotes preferred\",\n    \"noqa_row\": 20,\n    \"url\": \"https://docs.astral.sh/ruff/rules/bad-quotes-inline-string\"\n  },\n  {\n    \"cell\": null,\n    \"code\": \"D103\",\n    \"end_location\": {\n      \"column\": 28,\n      \"row\": 21\n    },\n    \"filename\": \"-\",\n    \"fix\": null,\n    \"location\": {\n      \"column\": 11,\n      \"row\": 21\n    },\n    \"message\": \"Missing docstring in public function\",\n    \"noqa_row\": 21,\n    \"url\": \"https://docs.astral.sh/ruff/rules/undocumented-public-function\"\n  },\n  {\n    \"cell\": null,\n    \"code\": \"E501\",\n    \"end_location\": {\n      \"column\": 101,\n      \"row\": 25\n    },\n    \"filename\": \"-\",\n    \"fix\": null,\n    \"location\": {\n      \"column\": 89,\n      \"row\": 25\n    },\n    \"message\": \"Line too long (100 > 88)\",\n    \"noqa_row\": 25,\n    \"url\": \"https://docs.astral.sh/ruff/rules/line-too-long\"\n  },\n  {\n    \"cell\": null,\n    \"code\": \"COM812\",\n    \"end_location\": {\n      \"column\": 101,\n      \"row\": 25\n    },\n    \"filename\": \"-\",\n    \"fix\": {\n      \"applicability\": \"safe\",\n      \"edits\": [\n        {\n          \"content\": \"),\",\n          \"end_location\": {\n            \"column\": 101,\n            \"row\": 25\n          },\n          \"location\": {\n            \"column\": 100,\n            \"row\": 25\n          }\n        }\n      ],\n      \"message\": \"Add trailing comma\"\n    },\n    \"location\": {\n      \"column\": 101,\n      \"row\": 25\n    },\n    \"message\": \"Trailing comma missing\",\n    \"noqa_row\": 25,\n    \"url\": \"https://docs.astral.sh/ruff/rules/missing-trailing-comma\"\n  },\n  {\n    \"cell\": null,\n    \"code\": \"W292\",\n    \"end_location\": {\n      \"column\": 4,\n      \"row\": 26\n    },\n    \"filename\": \"-\",\n    \"fix\": {\n      \"applicability\": \"safe\",\n      \"edits\": [\n        {\n          \"content\": \"\\n\",\n          \"end_location\": {\n            \"column\": 4,\n            \"row\": 26\n          },\n          \"location\": {\n            \"column\": 4,\n            \"row\": 26\n          }\n        }\n      ],\n      \"message\": \"Add trailing newline\"\n    },\n    \"location\": {\n      \"column\": 4,\n      \"row\": 26\n    },\n    \"message\": \"No newline at end of file\",\n    \"noqa_row\": 26,\n    \"url\": \"https://docs.astral.sh/ruff/rules/missing-newline-at-end-of-file\"\n  }\n]",
    "warning: `incorrect-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible. Ignoring `incorrect-blank-line-before-class`.\nwarning: `multi-line-summary-first-line` (D212) and `multi-line-summary-second-line` (D213) are incompatible. Ignoring `multi-line-summary-second-line`.\n",
    1
  ],
  "review_ai_result": "안녕하세요! 작성하신 FastAPI 코드 잘 보았습니다. 전반적으로 구조는 잘 되어 있지만, 몇 가지 개선할 수 있는 점과 주의사항을 공유드리겠습니다.\n\n### 1. **응답 모델에서 `bytes` 타입 사용 문제**\n\n현재 `CodeReviewResp` 모델에서 `formatter_result`와 `linter_result`가 `tuple[bytes, bytes, int | None]` 타입으로 정의되어 있습니다. JSON은 `bytes` 타입을 직접 지원하지 않기 때문에 클라이언트와의 통신 시 문제가 발생할 수 있습니다. 이를 해결하기 위해 `bytes` 데이터를 Base64 인코딩된 문자열로 변환하는 방법을 추천드립니다.\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nimport tools\nimport base64\nfrom typing import Optional, Tuple\n\napp = FastAPI()\n\n@app.get('/')\ndef root():\n    return 'Hello, World!'\n\nclass CodeReviewReq(BaseModel):\n    problem_text: Optional[str]\n    code: str\n\nclass CodeReviewResp(BaseModel):\n    formatter_result: Tuple[str, str, Optional[int]]\n    linter_result: Tuple[str, str, Optional[int]]\n    review_ai_result: Optional[str]\n\n@app.post('/api/pycode-review', response_model=CodeReviewResp)\nasync def pycode_review_api(body: CodeReviewReq) -> CodeReviewResp:\n    formatter_bytes = await tools.ruff_format(body.code)\n    linter_bytes = await tools.ruff_lint(body.code)\n    \n    formatter_str = base64.b64encode(formatter_bytes).decode('utf-8') if formatter_bytes else None\n    linter_str = base64.b64encode(linter_bytes).decode('utf-8') if linter_bytes else None\n    \n    review_ai_result = await tools.review_ai.review_chat_completions_api(body.problem_text, body.code)\n    \n    return CodeReviewResp(\n        formatter_result=(formatter_str, \"Formatter 로그\", None),  # 두 번째 값과 세 번째 값을 실제 값으로 대체해주세요\n        linter_result=(linter_str, \"Linter 로그\", None),          # 두 번째 값과 세 번째 값을 실제 값으로 대체해주세요\n        review_ai_result=review_ai_result\n    )\n```\n\n**설명:**\n- `formatter_result`와 `linter_result`의 첫 번째 요소를 `bytes`에서 Base64로 인코딩된 `str`으로 변경했습니다.\n- 두 번째와 세 번째 요소는 실제 로그나 상태 코드를 의미하는 것으로 보입니다. 필요에 따라 적절한 값을 넣으세요.\n- 클라이언트 측에서도 Base64로 인코딩된 데이터를 디코딩하여 사용할 수 있습니다.\n\n### 2. **비동기 함수 사용 확인**\n\n`tools.ruff_format`, `tools.ruff_lint`, `tools.review_ai.review_chat_completions_api` 함수들이 실제로 비동기 함수(`async def`)인지 확인해주세요. 만약 동기 함수라면 `await` 키워드를 제거해야 합니다.\n\n```python\n# 만약 동기 함수라면\nformatter_bytes = tools.ruff_format(body.code)\nlinter_bytes = tools.ruff_lint(body.code)\nreview_ai_result = tools.review_ai.review_chat_completions_api(body.problem_text, body.code)\n```\n\n### 3. **예외 처리 추가**\n\n외부 도구를 호출하는 부분에서는 예외가 발생할 가능성이 있으므로, 적절한 예외 처리를 추가하는 것이 좋습니다.\n\n```python\nfrom fastapi import HTTPException\n\n@app.post('/api/pycode-review', response_model=CodeReviewResp)\nasync def pycode_review_api(body: CodeReviewReq) -> CodeReviewResp:\n    try:\n        formatter_bytes = await tools.ruff_format(body.code)\n        linter_bytes = await tools.ruff_lint(body.code)\n        review_ai_result = await tools.review_ai.review_chat_completions_api(body.problem_text, body.code)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n    \n    formatter_str = base64.b64encode(formatter_bytes).decode('utf-8') if formatter_bytes else None\n    linter_str = base64.b64encode(linter_bytes).decode('utf-8') if linter_bytes else None\n    \n    return CodeReviewResp(\n        formatter_result=(formatter_str, \"Formatter 로그\", None),\n        linter_result=(linter_str, \"Linter 로그\", None),\n        review_ai_result=review_ai_result\n    )\n```\n\n### 4. **타입 힌팅 개선**\n\n`CodeReviewReq`의 `problem_text` 필드는 `str | None`으로 되어 있는데, Python 3.10 이상에서는 괜찮지만 이전 버전과의 호환성을 위해 `Optional[str]`을 사용하는 것이 좋습니다.\n\n```python\nfrom typing import Optional, Tuple\n\nclass CodeReviewReq(BaseModel):\n    problem_text: Optional[str]\n    code: str\n```\n\n### 5. **로깅 추가**\n\n디버깅과 유지보수를 위해 로깅을 추가하는 것도 좋은 방법입니다.\n\n```python\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n@app.post('/api/pycode-review', response_model=CodeReviewResp)\nasync def pycode_review_api(body: CodeReviewReq) -> CodeReviewResp:\n    logger.info(\"Received code review request\")\n    try:\n        formatter_bytes = await tools.ruff_format(body.code)\n        linter_bytes = await tools.ruff_lint(body.code)\n        review_ai_result = await tools.review_ai.review_chat_completions_api(body.problem_text, body.code)\n    except Exception as e:\n        logger.error(f\"Error during code review: {e}\")\n        raise HTTPException(status_code=500, detail=str(e))\n    \n    formatter_str = base64.b64encode(formatter_bytes).decode('utf-8') if formatter_bytes else None\n    linter_str = base64.b64encode(linter_bytes).decode('utf-8') if linter_bytes else None\n    \n    logger.info(\"Code review successful\")\n    return CodeReviewResp(\n        formatter_result=(formatter_str, \"Formatter 로그\", None),\n        linter_result=(linter_str, \"Linter 로그\", None),\n        review_ai_result=review_ai_result\n    )\n```\n\n### 결론\n\n제안드린 변경 사항들을 반영하시면, 클라이언트와의 데이터 송수신에서 발생할 수 있는 문제를 예방하고, 코드의 안정성과 유지보수성을 향상시킬 수 있을 것입니다. 추가적으로 궁금한 점이나 도움이 필요하시면 언제든지 말씀해주세요!"
}

@app.post("/api/pycode-review")
async def simulate_pycode_review(request_body: PyCodeReviewRequest):
    """
    /api/pycode-review 엔드포인트로 들어오는 POST 요청에 대해
    미리 정의된 JSON 데이터를 반환합니다.
    """
    # 요청 본문은 실제로는 사용되지 않지만, FastAPI가 POST 요청을 받을 수 있도록 정의했습니다.
    # 실제로는 request_body의 내용에 따라 다른 로직을 수행할 수 있습니다.

    # JSON 데이터를 파이썬 딕셔너리로 변환하여 반환합니다.
    return RESPONSE_JSON_DATA

# 서버 실행 방법:
# 1. 이 코드를 main.py와 같은 파일로 저장합니다.
# 2. 터미널에서 다음 명령어를 실행하여 uvicorn 서버를 실행합니다.
#    uvicorn main:app --reload

# 테스트 방법:
# curl -X POST http://127.0.0.1:8000/api/pycode-review -H "Content-Type: application/json" -d '{}'
# (요청 본문은 비어 있어도 무방합니다.)